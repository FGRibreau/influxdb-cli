#!/usr/bin/env node

'use strict';

var _ = require('lodash');
var Cli = require('./Cli');
var Table = require('cli-table');
var argv = require('optimist').usage('InfluxDB SQL CLI\nUsage: $0');

var DEFAULTS = {
  hostname: {
    args: ['h', 'hostname'],
    description: 'Host [%s]',
    value: 'localhost'
  },
  port: {
    args: ['port'],
    description: 'Port [%s]',
    value: 8086
  },
  secure: {
    args: ['s', 'secure'],
    description: 'Use HTTPS if flag is present',
    value: false
  },
  user: {
    args: ['u', 'user'],
    description: 'User [%s]',
    value: 'root'
  },
  auth: {
    args: ['a', 'auth'],
    description: 'HTTP basic auth [%s]',
    value: ''
  },
  password: {
    args: ['p', 'password'],
    description: 'Password [%s]',
    value: 'root'
  },
  database: {
    args: ['d', 'database'],
    description: 'Database [%s]',
    value: 'db'
  }
};

_.forEach(DEFAULTS, function (v, k) {
  argv.describe(v.args[0], v.description);
  if (v.args.length > 1) {
    argv.alias.apply(argv, v.args);
  }
  argv['default'](v.args[0], v.value);
  // p.option(v.args, v.description.replace('%s', v.value), v.value);
});

argv.boolean('pretty').describe('pretty', 'Display time in a human readable way');
argv['default']('pretty', false);

if (argv.argv.help) {
  console.log(argv.help());
  return process.exit(0);
}

argv = argv.argv;

Cli(function prompt(database_name) {
    return database_name + '>';
  },
  argv.auth,
  argv.hostname,
  argv.port,
  argv.secure,
  argv.user,
  argv.password,
  argv.database,
  function print(prompt, err, res, elapsed) {
    if (err) {
      return console.error(prompt, 'âœ˜', err.toString());
    }

    if (res === undefined || res === null) {
      return console.log(prompt, '(empty result)');
    }

    // don't display a new line if user just pressed enter
    if (res === '') {
      return;
    }

    if (!Array.isArray(res)) {
      //we are printing a non-tabular response
      console.log(prompt, res);
    } else {
      res.forEach(function (table) {
        if (argv.pretty) {
          table.points.forEach(function (point) {
            var d = new Date(point[0]);
            point[0] = d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear().toString().substring(2) + ' ' + d.toTimeString().substring(0, 8);
          });
          table.columns[0] = '      time     ';
        }

        var asciitable = new Table({
          head: table.columns,
          style: {
            compact: true
          }
        });

        var truncated = -1;
        if (table.points.length > 10000) {
          truncated = table.points.length;
          table.points = table.points.slice(0, 10000);
        }

        asciitable.push.apply(asciitable, table.points);

        if (res.length > 1) {
          console.log(table.name);
        }
        console.log(asciitable.toString());

        if (truncated !== -1) {
          console.log(['Too much rows returned (', truncated, ') the response was truncated to 10000 rows'].join(''));
        }
      });
    }
    if (elapsed) {
      console.log('Query took ', elapsed, 'ms');
    }
  }
);
